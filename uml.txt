@startuml
!theme plain

' ===== CLASSE PRINCIPAL =====
class Jogo {
  - screen: pygame.Surface
  - game_manager: GameManager
  + init()
  + run()
}

' ===== GERENCIADORES =====
class GameManager {
  - screen: pygame.Surface
  - display: pygame.Surface
  - clock: pygame.time.Clock
  - camera: list
  - running: bool
  - estado: str
  - nome_jogador: str
  - dificuldade: str
  - num_inimigos: int
  - menu: Menu
  - player: Player
  - tilemap: TileMap
  - background: Background
  - game_interface: GameInterface
  - spawn_manager: SpawnManager
  - projeteis: list
  - inimigos: list
  - particulas: list
  - musicas: list
  - sons: dict
  + init(screen)
  + iniciar_jogo(dados_jogador)
  + iniciar_jogo_carregado()
  + update()
  + processar_eventos()
  + salvar_progresso()
  + carregar_progresso()
  + verificar_jogo_salvo(): bool
  + adicionar_projetil(projetil)
  + remover_projetil(projetil)
  + adicionar_particula(particula)
  + tocar_som(nome_som)
}

class SpawnManager {
  - tilemap: TileMap
  - player: Player
  - inimigos_ativos: list
  - inimigos_pool: list
  - max_inimigos: int
  - inimigos_totais: int
  - inimigos_mortos: int
  - posicoes_spawn: list
  - ultimo_spawn: int
  - intervalo_spawn: int
  - game: GameManager
  - limite_limbo_y: int
  + init(tilemap, player, num_inimigos, game)
  + update()
  + spawn_inimigo()
  + remover_inimigo(inimigo)
  + todos_inimigos_mortos(): bool
  + verificar_limbo()
  + resetar_pool()
}

class AudioManager {
  - musicas: list
  - sons: dict
  + init()
  + tocar_som(nome_som)
  + tocar_musica_aleatoria()
  + parar_musica()
  + pausar_musica()
  + despausar_musica()
  + ajustar_volume_musica(volume)
  + ajustar_volume_som(nome_som, volume)
}

enum GameState {
  MENU
  PLAYING
  GAME_OVER
  VICTORY
}

class StateManager {
  - current_state: GameState
  - state_handlers: dict
  - state_transitions: dict
  + init()
  + register_state_handler(state, handler)
  + register_transition(from_state, to_state, transition_handler)
  + change_state(new_state)
  + update()
}

' ===== ENTIDADES =====
abstract class Entidade {
  - assets: dict
  - pos: list
  - size: list
  - velocity: list
  - collisions: dict
  - action: str
  - anim_offset: list
  - flip: bool
  - set_action: bool
  - animation: Animation
  + init(game, e_type, pos, size)
  + rect(): pygame.Rect
  + set_action(action)
  + update(tilemap, movement)
  + render(surf, offset)
}

class Player {
  - health: int
  - max_health: int
  - state: str
  - fury: int
  - max_fury: int
  - jumps: int
  - max_jumps: int
  - attacking: bool
  - attack_timer: int
  - dash_timer: int
  - dash_cooldown: int
  - invulnerable: bool
  - invulnerable_timer: int
  + init(game, pos, size)
  + update(tilemap, movement)
  + render(surf, offset)
  + attack()
  + dash()
  + take_damage(damage)
  + heal(amount)
  + gain_fury(amount)
}

class Slime {
  - health: int
  - damage: int
  - state: str
  - direction: int
  - patrol_speed: float
  - pursuit_speed: float
  - detection_range: int
  - attack_range: int
  - attack_timer: int
  - attack_cooldown: int
  - patrol_timer: int
  - direction_timer: int
  + init(game, pos, size)
  + update(tilemap, movement)
  + attack_player(player)
  + take_damage(damage)
}

class Esqueleto {
  - health: int
  - damage: int
  - state: str
  - detection_range: int
  - has_seen_player: bool
  + init(game, pos, size)
  + update(tilemap, movement)
  + attack_player(player)
  + take_damage(damage)
}

' ===== PROJÉTEIS E PARTÍCULAS =====
class Projetil {
  - assets: dict
  - pos: list
  - size: list
  - velocity: list
  - animation: Animation
  - lifespan: int
  - damage: int
  - is_player_projectile: bool
  + init(game, pos, velocity, projectile_type, is_player)
  + update()
  + render(surf, offset)
  + rect(): pygame.Rect
}

class Particle {
  - type: str
  - pos: list
  - velocity: list
  - animation: Animation
  + init(p_type, pos, velocity)
  + update()
  + render(surf, offset)
}

' ===== SISTEMA DE ANIMAÇÃO =====
class Animation {
  - images: list
  - img_dur: int
  - loop: bool
  - done: bool
  - frame: int
  - callback: function
  + init(images, img_dur, loop)
  + copy(): Animation
  + update()
  + img(): pygame.Surface
  + set_callback(callback)
}

' ===== SISTEMA DE MAPA =====
class TileMap {
  - tile_size: int
  - tilemap: dict
  - offgrid_tiles: list
  - neighbor_offsets: list
  - assets: dict
  + init(tile_size)
  + extract(id_pairs, keep)
  + tiles_around(pos): list
  + save(path)
  + load(path)
  + solid_check(pos): bool
  + physics_rects_around(pos): list
  + autotile()
  + render(surf, offset)
}

' ===== SISTEMA DE BACKGROUND =====
class Background {
  - layers: list
  + init()
  + add_layer(image_path, scroll_speed)
  + update(camera_x)
  + render(surf)
  + save(path)
  + load(path)
  + resize(new_size)
}

class BackgroundLayer {
  - image: pygame.Surface
  - scroll_speed: float
  - x_offset: float
  - image_path: str
  + init(image_path, scroll_speed)
  + update(camera_x)
  + render(surf)
  + resize(new_size)
  + to_dict(): dict
  + from_dict(data): BackgroundLayer
}

' ===== INTERFACE E MENU =====
class GameInterface {
  - screen: pygame.Surface
  - heart_image: pygame.Surface
  - empty_heart_image: pygame.Surface
  - jump_orb_image: pygame.Surface
  - fury_bar_bg: pygame.Surface
  - fury_bar_fill: pygame.Surface
  + init(screen)
  + load_images()
  + render_hearts(player)
  + render_jump_orb(player)
  + render_fury_bar(player)
  + render(player)
}

class Menu {
  - screen: pygame.Surface
  - state: str
  - selected_option: int
  - selected_difficulty: int
  - player_name: str
  - input_active: bool
  - ranking_data: list
  - colors: dict
  - fonts: dict
  - buttons: list
  + init(screen)
  + load_fonts()
  + handle_event(event)
  + update()
  + render()
  + load_ranking()
  + save_ranking()
  + add_score(name, difficulty, score)
}



' ===== UTILITÁRIOS =====
class Utils {
  + load_image(path): pygame.Surface
  + load_images(path): list
}

' ===== RELACIONAMENTOS =====

' Composição e Agregação
Jogo ||--|| GameManager : contém
GameManager ||--|| Menu : gerencia
GameManager ||--|| Player : contém
GameManager ||--|| TileMap : usa
GameManager ||--|| Background : usa
GameManager ||--|| GameInterface : contém
GameManager ||--|| SpawnManager : usa
GameManager ||--o{ Projetil : gerencia
GameManager ||--o{ Particle : gerencia
GameManager ||--o{ Slime : gerencia
GameManager ||--o{ Esqueleto : gerencia

' Herança
Player --|> Entidade : herda
Slime --|> Entidade : herda
Esqueleto --|> Entidade : herda

' Criação e Uso
Player ||--o{ Projetil : cria
Player ||--o{ Particle : cria
Esqueleto ||--o{ Projetil : cria

SpawnManager ||--o{ Slime : gerencia
SpawnManager ||--o{ Esqueleto : gerencia
SpawnManager ||--|| TileMap : usa
SpawnManager ||--|| Player : observa

' Sistema de Animação
Entidade ||--o{ Animation : usa
Projetil ||--o{ Animation : usa
Particle ||--|| Animation : usa

' Background
Background ||--o{ BackgroundLayer : contém

' Interface
GameInterface ||--|| Player : renderiza

' Utilitários
TileMap ..> Utils : usa
Entidade ..> Utils : usa
Projetil ..> Utils : usa
Particle ..> Utils : usa
BackgroundLayer ..> Utils : usa

' Estados
StateManager ||--|| GameState : gerencia
GameManager ..> StateManager : pode usar

' Áudio
GameManager ..> AudioManager : pode usar

@enduml